"""
Django settings for db_manager_py project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os, json, time
from django.core.exceptions import ImproperlyConfigured
from datetime import datetime, timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
django_file = os.path.join(BASE_DIR, 'secret_keys/django_key.json')
with open(django_file) as f:
    key_info = json.loads(f.read())
def get_django_key(param, key_info = key_info):
    try: 
        return key_info[param]
    except KeyError:
        error_msg = "Set the {} environment variable".format(param)
        raise ImproperlyConfigured(error_msg)

SECRET_KEY = get_django_key("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework', # rest api
    'corsheaders', # http cors

    'devTest.apps.DevtestConfig'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware'
]

ROOT_URLCONF = 'db_manager_py.urls'

CORS_ORIGIN_ALLOW_ALL = False
CORS_ORIGIN_WHITELIST = (
    'http://localhost:3000', # React
    'http://localhost:8000', # Django
)
CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
)
CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
)

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'db_manager_py.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
db_config = os.path.join(BASE_DIR, 'secret_keys/db_config.json')
with open(db_config) as f:
    config = json.loads(f.read())
def get_django_key(param, config = config):
    try: 
        return config[param]
    except KeyError:
        error_msg = "Set the {} environment variable".format(param)
        raise ImproperlyConfigured(error_msg)
DB_USER = get_django_key("USER")
DB_PASSWORD = get_django_key("PASSWORD")
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME' : 'db_manager',
        'USER' : DB_USER,
        'PASSWORD' : DB_PASSWORD,
        'HOST' : 'localhost',
        'PORT' : '3306'
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

# REST API setting
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES':(
        'rest_framework.permissions.IsAuthenticated',
    ),        
    'DEFAULT_AUTHENTICATION_CLASSES':(
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication'
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

# JWT 
jwt_key = os.path.join(BASE_DIR, 'secret_keys/jwt_key.json')
with open(jwt_key) as f:
    config = json.loads(f.read())
def get_jwt_key(param, config = config):
    try: 
        return config[param]
    except KeyError:
        error_msg = "Set the {} environment variable".format(param)
        raise ImproperlyConfigured(error_msg)
JWT_SECRET_KEY = get_jwt_key("JWT_SECRET_KEY")
JWT_AUTH = {
    'JWT_SECRET_KEY' : JWT_SECRET_KEY,
    'JWT_ALGORITHM' : 'HS256',
    'JWT_ALLOW_REFRESH' : True,
    'JWT_EXPIRATION_DELTA' : timedelta(days=7),
    'JWT_REFRESH_EXPIRATION_DELTA' : timedelta(days=28)
}